#include "led.h"
#include "delay.h"
#include "key.h"
#include "sys.h"
#include "usart.h"
#include "timer.h"
#include "dac.h"
#include "dma.h"
#include "math.h"

//32768 is a invalid length.
u16 data[16384]={2000,2041,2083,2125,2167,2209,2250,2292,2333,2374,2415,2456,2497,2537,2578,2618,2657,2697,2736,2775,2813,2851,2889,2926,2963,3000,3036,3071,3106,3141,3175,3209,3242,3274,3306,3338,3369,3399,3428,3457,3486,3513,3541,3567,3593,3618,3642,3665,3688,3710,3732,3752,3772,3791,3809,3827,3843,3859,3874,3888,3902,3914,3926,3937,3947,3956,3964,3971,3978,3984,3989,3992,3996,3998,3999,4000,3999,3998,3996,3992,3989,3984,3978,3971,3964,3956,3947,3937,3926,3914,3902,3888,3874,3859,3843,3827,3809,3791,3772,3752,3732,3710,3688,3665,3642,3618,3593,3567,3541,3513,3486,3457,3428,3399,3369,3338,3306,3274,3242,3209,3175,3141,3106,3071,3036,3000,2963,2926,2889,2851,2813,2775,2736,2697,2657,2618,2578,2537,2497,2456,2415,2374,2333,2292,2250,2209,2167,2125,2083,2041,2000,1958,1916,1874,1832,1790,1749,1707,1666,1625,1584,1543,1502,1462,1421,1381,1342,1302,1263,1224,1186,1148,1110,1073,1036,999,963,928,893,858,824,790,757,725,693,661,630,600,571,542,513,486,458,432,406,381,357,334,311,289,267,247,227,208,190,172,156,140,125,111,97,85,73,62,52,43,35,28,21,15,10,7,3,1,0,0,0,1,3,7,10,15,21,28,35,43,52,62,73,85,97,111,125,140,156,172,190,208,227,247,267,289,311,334,357,381,406,432,458,486,513,542,571,600,630,661,693,725,757,790,824,858,893,928,963,999,1036,1073,1110,1148,1186,1224,1263,1302,1342,1381,1421,1462,1502,1543,1584,1625,1666,1707,1749,1790,1832,1874,1916,1958};

typedef enum _waveType
{
	WAVE_SQUARE,
	WAVE_SINE,
	WAVE_RAMP,
} waveType;

void wave_gen(waveType type,u16 len,u16 vpp);

 int main(void)
 {		
	u8 key;
	waveType type;
	u16 data_len=512;
	u16 len_step=50;
	u16 len_max=8192;
	u16 data_vpp=3300;
	wave_gen(WAVE_SINE,data_len,data_vpp);
	delay_init(); 
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	uart_init(115200);
 	LED_Init();
	KEY_Init();
	TIM2_Int_Init(1,0);
	Dac1_Init();
	MYDMA_Config(DMA2_Channel3,(u32)&(DAC->DHR12R1),(u32)data,data_len);
	TIM_Cmd(TIM2, ENABLE);
   	while(1)
	{
		key=KEY_Scan(0);
		if(key!=0)
		{
					if(key==KEY0_PRES)
		{
			type++;
			type%=3;

		}
		else if(key==KEY1_PRES)
		{
			if(data_len<len_step)
				data_len=0;
			else
				data_len-=len_step;
		}
		else if(key==WKUP_PRES)
		{
			if(data_len>len_max-len_step)
				data_len=len_max;
			else
				data_len+=len_step;
		}
					wave_gen(type,data_len,data_vpp);
		}

	}	 
}	 
 
void wave_gen(waveType type,u16 len,u16 vpp) // vpp ranges from 0 to 3300, standing for 0V to 3.3v
{
	u16 base=2048;
	double amp=vpp/3300.0*2047.0;
	u16 i;
	if(vpp>3300)
		vpp=3300;
	if(type==WAVE_SINE)
	{
		for(i=0;i<len;i++)
		{
			data[i]=(u16)(base+sin((double)i/len*6.283185307)*amp);
		}
	}
	else if(type==WAVE_RAMP)
	{
		for(i=0;i<len;i++)
		{
			data[i]=(u16)(base+((double)i/len-0.5)*2*amp);
		}
	}
	else if(type==WAVE_SQUARE)
	{
		for(i=0;i<len/2;i++)
		{
			data[i]=base+amp;
		}
		for(i=len/2;i<len;i++)
		{
			data[i]=base-amp;
		}
	}
}
